// msg, chatd
const TELEGRAM_API_URL = `https://api.telegram.org/bot${process.env.BOT_TOKEN}`

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º—ã –∏ –¥–∞—Ç—ã
let currentSum = 0;
let lastResetDate = getTodayDate();

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
function getTodayDate() {
  return new Date().toISOString().slice(0, 10);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–π –¥–∞—Ç—ã
function getReadableDate() {
  return new Date().toLocaleDateString('ru-RU');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –¥–Ω—è
function checkDateAndReset() {
  const today = getTodayDate();
  if (today !== lastResetDate) {
    currentSum = 0;
    lastResetDate = today;
  }
}

export async function sendMessage(chatid, text) {
    const url = `${TELEGRAM_API_URL}/sendMessage`;
    try {
        const respose = await fetch(url, {
            method: "POST",
            headers: {
                'Content-type': 'application/json'
            },
            body: JSON.stringify({
                chat_id: chatid,
                text: text
            })
        })
        if (!respose.ok){
            console.log("Failed to send message to telegram user", await respose.text());
        }
        return await respose.json();
    } catch (err) {
        console.log("Error occured while sending message to telegram user", err);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function pinMessage(chatid, messageId) {
    const url = `${TELEGRAM_API_URL}/pinChatMessage`;
    try {
        const response = await fetch(url, {
            method: "POST",
            headers: {
                'Content-type': 'application/json'
            },
            body: JSON.stringify({
                chat_id: chatid,
                message_id: messageId
            })
        });
        if (!response.ok) {
            console.log("Failed to pin message", await response.text());
            return false;
        }
        return true;
    } catch (err) {
        console.log("Error occurred while pinning message", err);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /–∏—Ç–æ–≥
export async function summaryCommand(chatId) {
    checkDateAndReset();
    
    const date = getReadableDate();
    const response = `üìÖ –ò—Ç–æ–≥ –∑–∞ ${date}:\nüî¢ –°—É–º–º–∞: ${currentSum}`;

    try {
        const sentMessage = await sendMessage(chatId, response);
        if (sentMessage && sentMessage.result) {
            const pinSuccess = await pinMessage(chatId, sentMessage.result.message_id);
            if (!pinSuccess) {
                await sendMessage(chatId, '‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤).');
            }
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏:', err);
    }

    currentSum = 0;
    lastResetDate = getTodayDate();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ –∫ —Å—É–º–º–µ
export async function addToSum(chatId, text) {
    checkDateAndReset();
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ
    const number = parseFloat(text.replace(',', '.'));
    if (!isNaN(number)) {
        currentSum += number;
        await sendMessage(chatId, `–î–æ–±–∞–≤–ª–µ–Ω–æ: ${number}. –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: ${currentSum}`);
        return true;
    }
    return false;
}