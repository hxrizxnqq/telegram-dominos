// msg, chatd
const TELEGRAM_API_URL = `https://api.telegram.org/bot${process.env.BOT_TOKEN}`;

// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import fs from 'fs';
import path from 'path';

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const USERS_FILE_PATH = path.join(process.cwd(), 'users.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
function loadUsers() {
	try {
		if (fs.existsSync(USERS_FILE_PATH)) {
			const data = fs.readFileSync(USERS_FILE_PATH, 'utf8');
			return JSON.parse(data);
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
	}
	return [];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
function saveUsers(users) {
	try {
		fs.writeFileSync(USERS_FILE_PATH, JSON.stringify(users, null, 2), 'utf8');
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function trackUser(chatId, userInfo = {}) {
	const users = loadUsers();
	const polandTime = getPolandTime();
	
	// –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const existingUserIndex = users.findIndex(user => user.chatId === chatId);
	
	if (existingUserIndex !== -1) {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		users[existingUserIndex].lastSeen = polandTime.toISOString();
		users[existingUserIndex].totalInteractions = (users[existingUserIndex].totalInteractions || 0) + 1;
		
		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
		if (userInfo.username) users[existingUserIndex].username = userInfo.username;
		if (userInfo.firstName) users[existingUserIndex].firstName = userInfo.firstName;
		if (userInfo.lastName) users[existingUserIndex].lastName = userInfo.lastName;
	} else {
		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const newUser = {
			chatId: chatId,
			firstSeen: polandTime.toISOString(),
			lastSeen: polandTime.toISOString(),
			totalInteractions: 1,
			username: userInfo.username || null,
			firstName: userInfo.firstName || null,
			lastName: userInfo.lastName || null
		};
		users.push(newUser);
	}
	
	saveUsers(users);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function getUserStats() {
	const users = loadUsers();
	const now = getPolandTime();
	const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
	const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
	
	const activeToday = users.filter(user => new Date(user.lastSeen) > oneDayAgo).length;
	const activeThisWeek = users.filter(user => new Date(user.lastSeen) > oneWeekAgo).length;
	const totalInteractions = users.reduce((sum, user) => sum + (user.totalInteractions || 0), 0);
	
	return {
		totalUsers: users.length,
		activeToday,
		activeThisWeek,
		totalInteractions
	};
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–æ–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
function getPolandTime() {
	const now = new Date();
	return new Date(now.toLocaleString("en-US", {timeZone: "Europe/Warsaw"}));
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let expectedSum = 0; // –°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å
let receivedSum = 0; // –°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏–ª–∏
let lastResetDate = getPolandTime().toISOString(); // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ –≤ –ø–æ–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
let lastInput = null; // 'expected' –∏–ª–∏ 'received' - —á—Ç–æ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞
let botStats = {
	totalMessages: 0, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
	totalUsers: new Set(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
	messagesLastHour: [], // –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
	startTime: getPolandTime().toISOString(), // –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
	lastActivity: getPolandTime().toISOString() // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
const userStates = new Map(); // chatId -> { mode: 'waiting_expected' | 'waiting_received' | null }

// –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const deleteQueue = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function scheduleDelete(chatId, messageId, delayMs) {
	setTimeout(async () => {
		await deleteMessage(chatId, messageId);
	}, delayMs);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
function updateBotStats(chatId, userInfo = {}) {
	const now = getPolandTime();
	
	// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	botStats.totalMessages++;
	botStats.totalUsers.add(chatId);
	botStats.lastActivity = now.toISOString();
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
	botStats.messagesLastHour.push(now.getTime());
	
	// –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞
	const oneHourAgo = now.getTime() - (60 * 60 * 1000);
	botStats.messagesLastHour = botStats.messagesLastHour.filter(timestamp => timestamp > oneHourAgo);
	
	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ
	trackUser(chatId, userInfo);
	
	// –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
	scheduleDescriptionUpdate();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
function getBotStatus() {
	const now = getPolandTime();
	const hour = now.getHours();
	const messagesThisHour = botStats.messagesLastHour.length;
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
	let timeStatus = "";
	if (hour >= 6 && hour < 12) {
		timeStatus = "üåÖ –£—Ç—Ä–æ";
	} else if (hour >= 12 && hour < 18) {
		timeStatus = "‚òÄÔ∏è –î–µ–Ω—å";
	} else if (hour >= 18 && hour < 22) {
		timeStatus = "üåÜ –í–µ—á–µ—Ä";
	} else {
		timeStatus = "üåô –ù–æ—á—å";
	}
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
	let loadStatus = "";
	if (messagesThisHour === 0) {
		loadStatus = "üò¥ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º";
	} else if (messagesThisHour <= 5) {
		loadStatus = "üü¢ –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞";
	} else if (messagesThisHour <= 15) {
		loadStatus = "üü° –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞";
	} else if (messagesThisHour <= 30) {
		loadStatus = "üü† –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞";
	} else {
		loadStatus = "üî¥ –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞";
	}
	
	return { timeStatus, loadStatus, messagesThisHour };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
function getBotUptime() {
	const now = getPolandTime();
	const startTime = new Date(botStats.startTime);
	const uptimeMs = now.getTime() - startTime.getTime();
	
	const hours = Math.floor(uptimeMs / (1000 * 60 * 60));
	const minutes = Math.floor((uptimeMs % (1000 * 60 * 60)) / (1000 * 60));
	
	if (hours > 0) {
		return `${hours}—á ${minutes}–º–∏–Ω`;
	} else {
		return `${minutes}–º–∏–Ω`;
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ –ø–æ–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
function getTodayDate() {
	const now = new Date();
	const polandTime = new Date(now.toLocaleString("en-US", {timeZone: "Europe/Warsaw"}));
	return polandTime.toISOString().slice(0, 10);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞ (–¥–∞—Ç–∞ + –≤—Ä–µ–º—è 11:00) –≤ –ø–æ–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
function getResetTime() {
	const now = getPolandTime();
	const resetTime = new Date(now);
	resetTime.setHours(11, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 11:00:00 –ø–æ –ø–æ–ª—å—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
	
	// –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è –¥–æ 11:00, —Ç–æ –±–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å–±—Ä–æ—Å
	// –ï—Å–ª–∏ –ø–æ—Å–ª–µ 11:00, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ 11:00
	if (now.getHours() < 11) {
		// –î–æ 11:00 - –±–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å–±—Ä–æ—Å
		return resetTime.toISOString();
	} else {
		// –ü–æ—Å–ª–µ 11:00 - –±–µ—Ä–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π —Å–±—Ä–æ—Å
		resetTime.setDate(resetTime.getDate() + 1);
		return resetTime.toISOString();
	}
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–µ–Ω –ª–∏ —Å–±—Ä–æ—Å (–ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –≤ 11:00) –ø–æ –ø–æ–ª—å—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
function shouldReset() {
	const now = getPolandTime();
	const lastReset = new Date(lastResetDate);
	
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è (11:00) –≤ –ø–æ–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
	const todayReset = new Date(now);
	todayReset.setHours(11, 0, 0, 0);
	
	// –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ 11:00 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å –±—ã–ª –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö 11:00
	if (now >= todayReset && lastReset < todayReset) {
		return true;
	}
	
	return false;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–π –¥–∞—Ç—ã –≤ –ø–æ–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
function getReadableDate() {
	const polandTime = getPolandTime();
	return polandTime.toLocaleDateString("pl-PL");
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –≤ 11:00 –ø–æ –ø–æ–ª—å—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
function checkDateAndReset() {
	if (shouldReset()) {
		expectedSum = 0;
		receivedSum = 0;
		lastInput = null;
		lastResetDate = getPolandTime().toISOString(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞ –≤ –ø–æ–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
		// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		userStates.clear();
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
export async function sendMessage(chatid, text, replyMarkup = null) {
	const url = `${TELEGRAM_API_URL}/sendMessage`;
	try {
		const body = {
			chat_id: chatid,
			text: text,
			parse_mode: "HTML",
		};

		if (replyMarkup) {
			body.reply_markup = replyMarkup;
		}

		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify(body),
		});

		if (!response.ok) {
			const errorText = await response.text();
			console.log(
				"Failed to send message to telegram user",
				errorText
			);
			return null;
		}
		return await response.json();
	} catch (err) {
		console.log("Error occurred while sending message to telegram user", err);
		return null;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function editMessage(chatid, messageId, text, replyMarkup = null) {
	const url = `${TELEGRAM_API_URL}/editMessageText`;
	try {
		const body = {
			chat_id: chatid,
			message_id: messageId,
			text: text,
			parse_mode: "HTML",
		};

		if (replyMarkup) {
			body.reply_markup = replyMarkup;
		}

		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify(body),
		});

		return await response.json();
	} catch (err) {
		console.log("Error occurred while editing message", err);
		return null;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function deleteMessage(chatid, messageId) {
	const url = `${TELEGRAM_API_URL}/deleteMessage`;
	try {
		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify({
				chat_id: chatid,
				message_id: messageId,
			}),
		});

		return response.ok;
	} catch (err) {
		console.log("Error occurred while deleting message", err);
		return false;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query
export async function answerCallbackQuery(callbackQueryId, text = "") {
	const url = `${TELEGRAM_API_URL}/answerCallbackQuery`;
	try {
		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify({
				callback_query_id: callbackQueryId,
				text: text,
			}),
		});

		return response.ok;
	} catch (err) {
		console.log("Error occurred while answering callback query", err);
		return false;
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function createMainMenu() {
	return {
		inline_keyboard: [
			[{ text: "1Ô∏è‚É£ –í–≤–µ—Å—Ç–∏ –æ–∂–∏–¥–∞–µ–º—É—é —Å—É–º–º—É", callback_data: "input_expected" }],
			[{ text: "2Ô∏è‚É£ –í–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É", callback_data: "input_received" }],
			[{ text: "üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥", callback_data: "show_summary" }],
			[
				{ text: "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data: "reset_sum" },
				{ text: "‚Ü©Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ", callback_data: "reset_last" },
			],
			[{ text: "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data: "help" }],
		],
	};
}

// –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—É–º–º–∞–º–∏
export async function showMainInterface(chatId, messageId = null, userInfo = {}) {
	checkDateAndReset();
	updateBotStats(chatId, userInfo); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

	const date = getReadableDate();
	const difference = receivedSum - expectedSum;
	const differenceText =
		difference === 0
			? "0"
			: difference > 0
			? `+${difference}`
			: `${difference}`;

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º —Å–±—Ä–æ—Å–µ
	const now = getPolandTime();
	const nextResetInfo = now.getHours() < 11 
		? "—Å–µ–≥–æ–¥–Ω—è –≤ 11:00" 
		: "–∑–∞–≤—Ç—Ä–∞ –≤ 11:00";

	// –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
	const { timeStatus, loadStatus, messagesThisHour } = getBotStatus();
	const uptime = getBotUptime();

	const text = `üí∞ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —á–∞—è –¥–ª—è Dominos</b>
	
üìÖ <i>${date}</i>
üéØ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: <b>${expectedSum}</b>
üí∏ –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: <b>${receivedSum}</b>
üìä –¢–≤–æ–π –Ω–∞–ø–∏–≤–µ–∫: <b>${differenceText}</b>

üïê <i>–ê–≤—Ç–æ—Å–±—Ä–æ—Å ${nextResetInfo} (–ø–æ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è)</i>

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º</i>`;

	const keyboard = createMainMenu();

	if (messageId) {
		return await editMessage(chatId, messageId, text, keyboard);
	} else {
		return await sendMessage(chatId, text, keyboard);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–∏—Ç–æ–≥ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function summaryCommand(chatId, messageId = null, userInfo = {}) {
	checkDateAndReset();
	updateBotStats(chatId, userInfo); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

	const date = getReadableDate();
	const difference = receivedSum - expectedSum;
	const differenceText =
		difference === 0
			? "0"
			: difference > 0
			? `+${difference}`
			: `${difference}`;

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
	let statusEmoji = "üìä";
	let statusText = "–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç";

	if (difference > 0) {
		statusEmoji = "üí∞";
		statusText = "–ü—Ä–æ—Ñ–∏—Ç!";
	} else if (difference < 0) {
		statusEmoji = "üìâ";
		statusText = "–£–±—ã—Ç–æ–∫";
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
	const { timeStatus, loadStatus } = getBotStatus();
	const uptime = getBotUptime();

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
	const summaryText = `${statusEmoji} <b>${statusText}</b>

üìÖ –î–∞—Ç–∞: <i>${date}</i>
üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: <b>${expectedSum}</b>
üèß –ü–æ–ª—É—á–µ–Ω–æ: <b>${receivedSum}</b>
üìä –†–∞–∑–Ω–æ—Å—Ç—å: <b>${differenceText}</b>

ü§ñ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>
${timeStatus} ‚Ä¢ ${loadStatus}
‚è±Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç: ${uptime} ‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${botStats.totalUsers.size}

‚úÖ <i>–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã</i>`;

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
	const summaryMessage = await sendMessage(chatId, summaryText);

	// –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
	if (summaryMessage && summaryMessage.result) {
		await pinMessage(chatId, summaryMessage.result.message_id);

		// –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
		scheduleDelete(chatId, summaryMessage.result.message_id, 8000);
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—É–º–º—ã
	expectedSum = 0;
	receivedSum = 0;
	lastResetDate = new Date().toISOString();
	userStates.clear();

	// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω—É–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã)
	if (messageId) {
		await showMainInterface(chatId, messageId);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–∞
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
export async function handleNumberInput(
	chatId,
	text,
	userMessageId,
	mainMenuMessageId = null,
	userInfo = {}
) {
	checkDateAndReset();
	updateBotStats(chatId, userInfo); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
	await deleteMessage(chatId, userMessageId);

	const number = parseFloat(text.replace(",", "."));
	if (isNaN(number)) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è
		const errorMsg = await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");
		if (errorMsg && errorMsg.result) {
			scheduleDelete(chatId, errorMsg.result.message_id, 2500);
		}
		return false;
	}

	const userState = userStates.get(chatId);

	if (!userState || !userState.mode) {
		// –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
		const helpMsg = await sendMessage(
			chatId,
			"üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!"
		);
		if (helpMsg && helpMsg.result) {
			scheduleDelete(chatId, helpMsg.result.message_id, 3000);
		}
		return false;
	}

	let notification = "";

	if (userState.mode === "waiting_expected") {
		expectedSum = number;
		lastInput = "expected";
		notification = `üéØ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: ${number}`;
		userStates.delete(chatId); // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º
	} else if (userState.mode === "waiting_received") {
		receivedSum = number;
		lastInput = "received";
		notification = `üí∏ –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${number}`;
		userStates.delete(chatId); // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º–∏ —Å—É–º–º–∞–º–∏
	if (mainMenuMessageId) {
		await showMainInterface(chatId, mainMenuMessageId);
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	const notificationMsg = await sendMessage(chatId, notification);
	if (notificationMsg && notificationMsg.result) {
		scheduleDelete(chatId, notificationMsg.result.message_id, 1500);
	}

	return true;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
export async function showHelp(chatId, messageId = null, userInfo = {}) {
	updateBotStats(chatId, userInfo); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	
	const { timeStatus, loadStatus } = getBotStatus();
	const uptime = getBotUptime();
	
	const text = `‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

üéØ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "1Ô∏è‚É£" –∏ –≤–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é —Å—É–º–º—É
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "2Ô∏è‚É£" –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É  
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥" –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ß–∏—Å–ª–∞ (1500, 1400.50) - –í–≤–æ–¥ —Å—É–º–º

üí° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å—É–º–º–∞–º–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11:00
‚Ä¢ –ü–æ–ª–Ω–æ–µ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>
${timeStatus} ‚Ä¢ ${loadStatus}
‚è±Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç: ${uptime} ‚Ä¢ üáµüá± –ü–æ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è`;

	const keyboard = {
		inline_keyboard: [
			[{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }],
		],
	};

	if (messageId) {
		return await editMessage(chatId, messageId, text, keyboard);
	} else {
		return await sendMessage(chatId, text, keyboard);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function pinMessage(chatid, messageId) {
	const url = `${TELEGRAM_API_URL}/pinChatMessage`;
	try {
		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify({
				chat_id: chatid,
				message_id: messageId,
				disable_notification: true,
			}),
		});

		return response.ok;
	} catch (err) {
		console.log("Error occurred while pinning message", err);
		return false;
	}
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—É–º–º—ã
export async function setExpectedInputMode(chatId, messageId = null, userInfo = {}) {
	updateBotStats(chatId, userInfo); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	userStates.set(chatId, { mode: "waiting_expected" });

	const text = `üéØ <b>–í–≤–æ–¥ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—É–º–º—ã</b>

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ - —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å

<i>–ü—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50</i>`;

	const keyboard = {
		inline_keyboard: [
			[{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }],
		],
	};

	if (messageId) {
		return await editMessage(chatId, messageId, text, keyboard);
	} else {
		return await sendMessage(chatId, text, keyboard);
	}
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã
export async function setReceivedInputMode(chatId, messageId = null, userInfo = {}) {
	updateBotStats(chatId, userInfo); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	userStates.set(chatId, { mode: "waiting_received" });

	const text = `üí∏ <b>–í–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã</b>

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ - —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏

<i>–ü—Ä–∏–º–µ—Ä: 1400 –∏–ª–∏ 1400.75</i>`;

	const keyboard = {
		inline_keyboard: [
			[{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }],
		],
	};

	if (messageId) {
		return await editMessage(chatId, messageId, text, keyboard);
	} else {
		return await sendMessage(chatId, text, keyboard);
	}
}

// –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
export async function resetData(chatId, messageId = null, userInfo = {}) {
	updateBotStats(chatId, userInfo); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	
	expectedSum = 0;
	receivedSum = 0;
	lastInput = null;
	userStates.delete(chatId); // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ
	const notification = await sendMessage(chatId, "üîÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã");
	if (notification && notification.result) {
		scheduleDelete(chatId, notification.result.message_id, 1500);
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	if (messageId) {
		await showMainInterface(chatId, messageId);
	}
}

// –°–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–≤–æ–¥–∞
export async function resetLastInput(chatId, messageId = null, userInfo = {}) {
	updateBotStats(chatId, userInfo); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	
	if (!lastInput) {
		// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–≤–æ–¥–∞
		const notification = await sendMessage(chatId, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–±—Ä–æ—Å–∞");
		if (notification && notification.result) {
			scheduleDelete(chatId, notification.result.message_id, 2000);
		}
		return;
	}

	let resetText = "";
	if (lastInput === "expected") {
		expectedSum = 0;
		resetText = "‚Ü©Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞";
	} else if (lastInput === "received") {
		receivedSum = 0;
		resetText = "‚Ü©Ô∏è –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞";
	}

	lastInput = null; // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤–≤–æ–¥–µ
	userStates.delete(chatId); // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ
	const notification = await sendMessage(chatId, resetText);
	if (notification && notification.result) {
		scheduleDelete(chatId, notification.result.message_id, 1500);
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	if (messageId) {
		await showMainInterface(chatId, messageId);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞
async function updateBotName() {
	const { timeStatus, loadStatus } = getBotStatus();
	const now = getPolandTime();
	const hour = now.getHours().toString().padStart(2, '0');
	const minute = now.getMinutes().toString().padStart(2, '0');
	
	// –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–º—è
	let botName = "üçï Domino's Calc";
	
	// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤—Ä–µ–º–µ–Ω–∏
	if (hour >= 6 && hour < 12) {
		botName = "üåÖ Domino's Calc";
	} else if (hour >= 12 && hour < 18) {
		botName = "‚òÄÔ∏è Domino's Calc";
	} else if (hour >= 18 && hour < 22) {
		botName = "üåÜ Domino's Calc";
	} else {
		botName = "üåô Domino's Calc";
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–≥—Ä—É–∑–∫–∏
	const messagesThisHour = botStats.messagesLastHour.length;
	if (messagesThisHour > 15) {
		botName += " üî•"; // –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	} else if (messagesThisHour > 5) {
		botName += " ‚ö°"; // –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	} else if (messagesThisHour > 0) {
		botName += " üíö"; // –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	}
	
	try {
		const response = await fetch(`${TELEGRAM_API_URL}/setMyName`, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				name: botName
			}),
		});
		
		if (response.ok) {
			console.log(`‚úÖ –ò–º—è –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${botName}`);
		}
	} catch (err) {
		console.log("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞:", err);
	}
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π
async function updateAdvancedBotName() {
	const now = getPolandTime();
	const hour = now.getHours();
	const date = now.getDate();
	const month = now.getMonth() + 1; // getMonth() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0-11
	const dayOfWeek = now.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∏ —Ç.–¥.
	
	let botName = "üçï Domino's";
	let statusEmoji = "";
	
	// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã (–ø–æ–ª—å—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏)
	if (month === 12 && date >= 24 && date <= 26) {
		botName = "üéÑ Domino's Calc"; // –†–æ–∂–¥–µ—Å—Ç–≤–æ
	} else if (month === 1 && date === 1) {
		botName = "üéä Domino's Calc"; // –ù–æ–≤—ã–π –≥–æ–¥
	} else if (month === 5 && date === 3) {
		botName = "üáµüá± Domino's Calc"; // –î–µ–Ω—å –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –ü–æ–ª—å—à–∏
	} else if (month === 5 && date === 1) {
		botName = "üíº Domino's Calc"; // –î–µ–Ω—å —Ç—Ä—É–¥–∞
	} else {
		// –û–±—ã—á–Ω—ã–µ –¥–Ω–∏ - –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤—Ä–µ–º–µ–Ω–∏
		if (hour >= 6 && hour < 12) {
			statusEmoji = "üåÖ"; // –£—Ç—Ä–æ
		} else if (hour >= 12 && hour < 18) {
			statusEmoji = "‚òÄÔ∏è"; // –î–µ–Ω—å
		} else if (hour >= 18 && hour < 22) {
			statusEmoji = "üåÜ"; // –í–µ—á–µ—Ä
		} else {
			statusEmoji = "üåô"; // –ù–æ—á—å
		}
		
		// –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
		if (dayOfWeek === 0) { // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
			botName = `${statusEmoji} Domino's üò¥`;
		} else if (dayOfWeek === 6) { // –°—É–±–±–æ—Ç–∞
			botName = `${statusEmoji} Domino's üéâ`;
		} else if (dayOfWeek === 1) { // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
			botName = `${statusEmoji} Domino's üí™`;
		} else if (dayOfWeek === 5) { // –ü—è—Ç–Ω–∏—Ü–∞
			botName = `${statusEmoji} Domino's üéä`;
		} else {
			botName = `${statusEmoji} Domino's Calc`;
		}
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
	const messagesThisHour = botStats.messagesLastHour.length;
	if (messagesThisHour >= 30) {
		botName += " üî•"; // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	} else if (messagesThisHour >= 15) {
		botName += " ‚ö°"; // –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	} else if (messagesThisHour >= 5) {
		botName += " üíö"; // –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	} else if (messagesThisHour > 0) {
		botName += " üü¢"; // –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	}
	
	try {
		const response = await fetch(`${TELEGRAM_API_URL}/setMyName`, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				name: botName
			}),
		});
		
		if (response.ok) {
			console.log(`‚úÖ –ò–º—è –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${botName}`);
		} else {
			const errorText = await response.text();
			console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏: ${errorText}`);
		}
	} catch (err) {
		console.log("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–æ—Ç–∞:", err);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
async function updateBotDescription() {
	try {
		const { timeStatus, loadStatus, messagesThisHour } = getBotStatus();
		const uptime = getBotUptime();
		const totalUsers = botStats.totalUsers.size;
		const userStats = getUserStats();
		
		// –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
		const description = `${timeStatus} ‚Ä¢ ${loadStatus}
üìä ${messagesThisHour} —Å–æ–æ–±—â–µ–Ω–∏–π/—á–∞—Å ‚Ä¢ ‚è±Ô∏è ${uptime}
üë• ${userStats.totalUsers} –≤—Å–µ–≥–æ ‚Ä¢ ${userStats.activeToday} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
üáµüá± –ü–æ–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è ‚Ä¢ üí¨ ${userStats.totalInteractions} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —á–∞–µ–≤—ã—Ö –¥–ª—è Dominos —Å –∞–≤—Ç–æ—Å–±—Ä–æ—Å–æ–º –≤ 11:00`;

		const url = `${TELEGRAM_API_URL}/setMyDescription`;
		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				description: description
			}),
		});

		if (response.ok) {
			console.log("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", description.split('\n')[0]);
		} else {
			const errorText = await response.text();
			console.log("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞:", errorText);
		}
	} catch (err) {
		console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞:", err.message);
	}
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
let lastDescriptionUpdate = 0;
let descriptionUpdateTimer = null;

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
function startDescriptionUpdateTimer() {
	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
	if (descriptionUpdateTimer) {
		clearInterval(descriptionUpdateTimer);
	}
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç
	descriptionUpdateTimer = setInterval(async () => {
		try {
			console.log("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞...");
			await updateBotDescription();
			lastDescriptionUpdate = Date.now();
		} catch (err) {
			console.log("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:", err.message);
		}
	}, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
	
	console.log("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)");
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
function stopDescriptionUpdateTimer() {
	if (descriptionUpdateTimer) {
		clearInterval(descriptionUpdateTimer);
		descriptionUpdateTimer = null;
		console.log("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
	}
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞ (–¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
function scheduleDescriptionUpdate() {
	const now = Date.now();
	
	// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
	if (now - lastDescriptionUpdate > 5 * 60 * 1000) {
		lastDescriptionUpdate = now;
		
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
		setTimeout(async () => {
			try {
				await updateBotDescription();
			} catch (err) {
				console.log("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:", err.message);
			}
		}, 2000);
	}
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
export async function forceUpdateBotDescription() {
	lastDescriptionUpdate = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
	try {
		await updateBotDescription();
		lastDescriptionUpdate = Date.now();
	} catch (err) {
		console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:", err.message);
	}
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
export async function initializeBotProfileSystem() {
	console.log("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±–æ—Ç–∞...");
	
	// –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	await forceUpdateBotDescription();
	
	// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
	startDescriptionUpdateTimer();
	
	console.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
export async function stopBotProfileSystem() {
	stopDescriptionUpdateTimer();
	console.log("üõë –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export { loadUsers, saveUsers, trackUser, getUserStats };

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤
process.on('SIGINT', async () => {
	console.log("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...");
	await stopBotProfileSystem();
	process.exit(0);
});

process.on('SIGTERM', async () => {
	console.log("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...");
	await stopBotProfileSystem();
	process.exit(0);
});
