// msg, chatd
const TELEGRAM_API_URL = `https://api.telegram.org/bot${process.env.BOT_TOKEN}`;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let expectedSum = 0; // –°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å
let receivedSum = 0; // –°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏–ª–∏
let lastResetDate = getTodayDate();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
const userStates = new Map(); // chatId -> { mode: 'waiting_expected' | 'waiting_received' | null }

// –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const deleteQueue = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function scheduleDelete(chatId, messageId, delayMs) {
	setTimeout(async () => {
		await deleteMessage(chatId, messageId);
	}, delayMs);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
function getTodayDate() {
	return new Date().toISOString().slice(0, 10);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–π –¥–∞—Ç—ã
function getReadableDate() {
	return new Date().toLocaleDateString("ru-RU");
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –¥–Ω—è
function checkDateAndReset() {
	const today = getTodayDate();
	if (today !== lastResetDate) {
		expectedSum = 0;
		receivedSum = 0;
		lastResetDate = today;
		// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		userStates.clear();
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
export async function sendMessage(chatid, text, replyMarkup = null) {
	const url = `${TELEGRAM_API_URL}/sendMessage`;
	try {
		const body = {
			chat_id: chatid,
			text: text,
			parse_mode: "HTML",
		};

		if (replyMarkup) {
			body.reply_markup = replyMarkup;
		}

		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify(body),
		});

		if (!response.ok) {
			console.log(
				"Failed to send message to telegram user",
				await response.text()
			);
		}
		return await response.json();
	} catch (err) {
		console.log("Error occurred while sending message to telegram user", err);
		return null;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function editMessage(chatid, messageId, text, replyMarkup = null) {
	const url = `${TELEGRAM_API_URL}/editMessageText`;
	try {
		const body = {
			chat_id: chatid,
			message_id: messageId,
			text: text,
			parse_mode: "HTML",
		};

		if (replyMarkup) {
			body.reply_markup = replyMarkup;
		}

		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify(body),
		});

		return await response.json();
	} catch (err) {
		console.log("Error occurred while editing message", err);
		return null;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function deleteMessage(chatid, messageId) {
	const url = `${TELEGRAM_API_URL}/deleteMessage`;
	try {
		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify({
				chat_id: chatid,
				message_id: messageId,
			}),
		});

		return response.ok;
	} catch (err) {
		console.log("Error occurred while deleting message", err);
		return false;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query
export async function answerCallbackQuery(callbackQueryId, text = "") {
	const url = `${TELEGRAM_API_URL}/answerCallbackQuery`;
	try {
		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify({
				callback_query_id: callbackQueryId,
				text: text,
			}),
		});

		return response.ok;
	} catch (err) {
		console.log("Error occurred while answering callback query", err);
		return false;
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function createMainMenu() {
	return {
		inline_keyboard: [
			[
				{ text: "1Ô∏è‚É£ –í–≤–µ—Å—Ç–∏ –æ–∂–∏–¥–∞–µ–º—É—é —Å—É–º–º—É", callback_data: "input_expected" },
			],
			[
				{ text: "2Ô∏è‚É£ –í–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É", callback_data: "input_received" },
			],
			[
				{ text: "üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥", callback_data: "show_summary" },
				{ text: "üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data: "reset_sum" },
			],
			[{ text: "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data: "help" }],
		],
	};
}

// –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—É–º–º–∞–º–∏
export async function showMainInterface(chatId, messageId = null) {
	checkDateAndReset();

	const date = getReadableDate();
	const difference = receivedSum - expectedSum;
	const differenceText = difference === 0 ? "0" : 
		difference > 0 ? `+${difference}` : `${difference}`;
	
	const text = `üí∞ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞–∑–Ω–æ—Å—Ç–∏</b>
	
üìÖ <i>${date}</i>
üéØ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: <b>${expectedSum}</b>
üí∏ –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: <b>${receivedSum}</b>
üìä –†–∞–∑–Ω–æ—Å—Ç—å: <b>${differenceText}</b>

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º</i>`;

	const keyboard = createMainMenu();

	if (messageId) {
		return await editMessage(chatId, messageId, text, keyboard);
	} else {
		return await sendMessage(chatId, text, keyboard);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–∏—Ç–æ–≥ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function summaryCommand(chatId, messageId = null) {
	checkDateAndReset();

	const date = getReadableDate();
	const difference = receivedSum - expectedSum;
	const differenceText = difference === 0 ? "0" : 
		difference > 0 ? `+${difference}` : `${difference}`;
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
	let statusEmoji = "üìä";
	let statusText = "–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç";
	
	if (difference > 0) {
		statusEmoji = "üí∞";
		statusText = "–ü—Ä–æ—Ñ–∏—Ç!";
	} else if (difference < 0) {
		statusEmoji = "üìâ";
		statusText = "–£–±—ã—Ç–æ–∫";
	}

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
	const summaryText = `${statusEmoji} <b>${statusText}</b>

üìÖ –î–∞—Ç–∞: <i>${date}</i>
üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: <b>${expectedSum}</b>
ÔøΩ –ü–æ–ª—É—á–µ–Ω–æ: <b>${receivedSum}</b>
üìä –†–∞–∑–Ω–æ—Å—Ç—å: <b>${differenceText}</b>

‚úÖ <i>–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã</i>`;

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
	const summaryMessage = await sendMessage(chatId, summaryText);

	// –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
	if (summaryMessage && summaryMessage.result) {
		await pinMessage(chatId, summaryMessage.result.message_id);

		// –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
		scheduleDelete(chatId, summaryMessage.result.message_id, 8000);
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—É–º–º—ã
	expectedSum = 0;
	receivedSum = 0;
	lastResetDate = getTodayDate();
	userStates.clear();

	// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω—É–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã)
	if (messageId) {
		await showMainInterface(chatId, messageId);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–∞
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
export async function handleNumberInput(
	chatId,
	text,
	userMessageId,
	mainMenuMessageId = null
) {
	checkDateAndReset();

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
	await deleteMessage(chatId, userMessageId);

	const number = parseFloat(text.replace(",", "."));
	if (isNaN(number)) {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è
		const errorMsg = await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");
		if (errorMsg && errorMsg.result) {
			scheduleDelete(chatId, errorMsg.result.message_id, 2500);
		}
		return false;
	}

	const userState = userStates.get(chatId);
	
	if (!userState || !userState.mode) {
		// –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
		const helpMsg = await sendMessage(chatId, "üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!");
		if (helpMsg && helpMsg.result) {
			scheduleDelete(chatId, helpMsg.result.message_id, 3000);
		}
		return false;
	}

	let notification = "";
	
	if (userState.mode === 'waiting_expected') {
		expectedSum = number;
		notification = `üéØ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: ${number}`;
		userStates.delete(chatId); // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º
	} else if (userState.mode === 'waiting_received') {
		receivedSum = number;
		notification = `üí∏ –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${number}`;
		userStates.delete(chatId); // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º–∏ —Å—É–º–º–∞–º–∏
	if (mainMenuMessageId) {
		await showMainInterface(chatId, mainMenuMessageId);
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	const notificationMsg = await sendMessage(chatId, notification);
	if (notificationMsg && notificationMsg.result) {
		scheduleDelete(chatId, notificationMsg.result.message_id, 1500);
	}

	return true;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
export async function showHelp(chatId, messageId = null) {
	const text = `‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

üéØ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "1Ô∏è‚É£" –∏ –≤–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é —Å—É–º–º—É
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "2Ô∏è‚É£" –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É  
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥" –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ß–∏—Å–ª–∞ (1500, 1400.50) - –í–≤–æ–¥ —Å—É–º–º

üí° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å—É–º–º–∞–º–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞—Ö`;

	const keyboard = {
		inline_keyboard: [
			[{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }],
		],
	};

	if (messageId) {
		return await editMessage(chatId, messageId, text, keyboard);
	} else {
		return await sendMessage(chatId, text, keyboard);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function pinMessage(chatid, messageId) {
	const url = `${TELEGRAM_API_URL}/pinChatMessage`;
	try {
		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify({
				chat_id: chatid,
				message_id: messageId,
				disable_notification: true,
			}),
		});

		return response.ok;
	} catch (err) {
		console.log("Error occurred while pinning message", err);
		return false;
	}
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—É–º–º—ã
export async function setExpectedInputMode(chatId, messageId = null) {
	userStates.set(chatId, { mode: 'waiting_expected' });
	
	const text = `üéØ <b>–í–≤–æ–¥ –æ–∂–∏–¥–∞–µ–º–æ–π —Å—É–º–º—ã</b>

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ - —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å

<i>–ü—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50</i>`;

	const keyboard = {
		inline_keyboard: [
			[{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }],
		],
	};

	if (messageId) {
		return await editMessage(chatId, messageId, text, keyboard);
	} else {
		return await sendMessage(chatId, text, keyboard);
	}
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã
export async function setReceivedInputMode(chatId, messageId = null) {
	userStates.set(chatId, { mode: 'waiting_received' });
	
	const text = `üí∏ <b>–í–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã</b>

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ - —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏

<i>–ü—Ä–∏–º–µ—Ä: 1400 –∏–ª–∏ 1400.75</i>`;

	const keyboard = {
		inline_keyboard: [
			[{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }],
		],
	};

	if (messageId) {
		return await editMessage(chatId, messageId, text, keyboard);
	} else {
		return await sendMessage(chatId, text, keyboard);
	}
}
