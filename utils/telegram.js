// msg, chatd
const TELEGRAM_API_URL = `https://api.telegram.org/bot${process.env.BOT_TOKEN}`;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º—ã –∏ –¥–∞—Ç—ã
let currentSum = 0;
let lastResetDate = getTodayDate();

// –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const deleteQueue = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function scheduleDelete(chatId, messageId, delayMs) {
	setTimeout(async () => {
		await deleteMessage(chatId, messageId);
	}, delayMs);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
function getTodayDate() {
	return new Date().toISOString().slice(0, 10);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–π –¥–∞—Ç—ã
function getReadableDate() {
	return new Date().toLocaleDateString("ru-RU");
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –¥–Ω—è
function checkDateAndReset() {
	const today = getTodayDate();
	if (today !== lastResetDate) {
		currentSum = 0;
		lastResetDate = today;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
export async function sendMessage(chatid, text, replyMarkup = null) {
	const url = `${TELEGRAM_API_URL}/sendMessage`;
	try {
		const body = {
			chat_id: chatid,
			text: text,
			parse_mode: "HTML",
		};

		if (replyMarkup) {
			body.reply_markup = replyMarkup;
		}

		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify(body),
		});

		if (!response.ok) {
			console.log(
				"Failed to send message to telegram user",
				await response.text()
			);
		}
		return await response.json();
	} catch (err) {
		console.log("Error occurred while sending message to telegram user", err);
		return null;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function editMessage(chatid, messageId, text, replyMarkup = null) {
	const url = `${TELEGRAM_API_URL}/editMessageText`;
	try {
		const body = {
			chat_id: chatid,
			message_id: messageId,
			text: text,
			parse_mode: "HTML",
		};

		if (replyMarkup) {
			body.reply_markup = replyMarkup;
		}

		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify(body),
		});

		return await response.json();
	} catch (err) {
		console.log("Error occurred while editing message", err);
		return null;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function deleteMessage(chatid, messageId) {
	const url = `${TELEGRAM_API_URL}/deleteMessage`;
	try {
		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify({
				chat_id: chatid,
				message_id: messageId,
			}),
		});

		return response.ok;
	} catch (err) {
		console.log("Error occurred while deleting message", err);
		return false;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback query
export async function answerCallbackQuery(callbackQueryId, text = "") {
	const url = `${TELEGRAM_API_URL}/answerCallbackQuery`;
	try {
		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify({
				callback_query_id: callbackQueryId,
				text: text,
			}),
		});

		return response.ok;
	} catch (err) {
		console.log("Error occurred while answering callback query", err);
		return false;
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function createMainMenu() {
	return {
		inline_keyboard: [
			[
				{ text: "üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥", callback_data: "show_summary" },
				{ text: "üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data: "reset_sum" },
			],
			[{ text: "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data: "help" }],
		],
	};
}

// –ì–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Å—É–º–º–æ–π
export async function showMainInterface(chatId, messageId = null) {
	checkDateAndReset();

	const date = getReadableDate();
	const text = `ÔøΩ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—É–º–º</b>
	
üìÖ <i>${date}</i>
ÔøΩ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <b>${currentSum}</b>

<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å—É–º–º–µ</i>`;

	const keyboard = createMainMenu();

	if (messageId) {
		return await editMessage(chatId, messageId, text, keyboard);
	} else {
		return await sendMessage(chatId, text, keyboard);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–∏—Ç–æ–≥ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function summaryCommand(chatId, messageId = null) {
	checkDateAndReset();

	const date = getReadableDate();
	const finalSum = currentSum; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—É–º–º—É

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
	const summaryText = `üìã <b>–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>

üìÖ –î–∞—Ç–∞: <i>${date}</i>
üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: <b>${finalSum}</b>

‚úÖ <i>–°—É–º–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ 0</i>`;

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
	const summaryMessage = await sendMessage(chatId, summaryText);

	// –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
	if (summaryMessage && summaryMessage.result) {
		await pinMessage(chatId, summaryMessage.result.message_id);

		// –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
		scheduleDelete(chatId, summaryMessage.result.message_id, 8000);
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—É–º–º—É
	currentSum = 0;
	lastResetDate = getTodayDate();

	// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω—É–ª–µ–Ω–Ω—É—é —Å—É–º–º—É)
	if (messageId) {
		await showMainInterface(chatId, messageId);
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–∞
export async function addToSum(
	chatId,
	text,
	userMessageId,
	mainMenuMessageId = null
) {
	checkDateAndReset();

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
	await deleteMessage(chatId, userMessageId);

	const number = parseFloat(text.replace(",", "."));
	if (!isNaN(number)) {
		currentSum += number;

		// –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤–æ–π —Å—É–º–º–æ–π
		if (mainMenuMessageId) {
			await showMainInterface(chatId, mainMenuMessageId);
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è
		const notification = await sendMessage(chatId, `‚úÖ +${number} z≈Ç`);

		// –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ)
		if (notification && notification.result) {
			scheduleDelete(chatId, notification.result.message_id, 1500);
		}

		return true;
	} else {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è
		const errorMsg = await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞");

		if (errorMsg && errorMsg.result) {
			// –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 2.5 —Å–µ–∫—É–Ω–¥—ã
			scheduleDelete(chatId, errorMsg.result.message_id, 2500);
		}

		return false;
	}
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
export async function showHelp(chatId, messageId = null) {
	const text = `‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

üéØ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å—É–º–º–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –°—É–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ –ß–∏—Å–ª–∞ (100, 50.5, 25,75) - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ —Å—É–º–º–µ

üí° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ`;

	const keyboard = {
		inline_keyboard: [
			[{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "main_menu" }],
		],
	};

	if (messageId) {
		return await editMessage(chatId, messageId, text, keyboard);
	} else {
		return await sendMessage(chatId, text, keyboard);
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export async function pinMessage(chatid, messageId) {
	const url = `${TELEGRAM_API_URL}/pinChatMessage`;
	try {
		const response = await fetch(url, {
			method: "POST",
			headers: {
				"Content-type": "application/json",
			},
			body: JSON.stringify({
				chat_id: chatid,
				message_id: messageId,
				disable_notification: true,
			}),
		});

		return response.ok;
	} catch (err) {
		console.log("Error occurred while pinning message", err);
		return false;
	}
}
